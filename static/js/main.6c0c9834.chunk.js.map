{"version":3,"sources":["components/Post.js","components/Spinner.js","components/ScrollToTop.js","App.js","index.js"],"names":["Post","props","id","useParams","filteredPost","posts","filter","el","_id","comments","title","map","comment","username","className","Date","date","toLocaleDateString","text","onSubmit","addComment","method","data-id","htmlFor","onChange","handleInput","type","name","placeholder","value","required","rows","Spinner","ScrollToTop","pathname","useLocation","useEffect","window","scrollTo","App","useState","setPosts","loading","setLoading","baseUrl","fetch","mode","headers","then","res","json","data","postsDisplay","length","post","published","to","setComment","path","e","preventDefault","target","getAttribute","options","body","JSON","stringify","index","i","status","clonedPosts","clonePosts","splice","now","exact","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mTAgEeA,EA5DF,SAACC,GAAU,IAEdC,EAAOC,cAAPD,GAEFE,EAAeH,EAAMI,MAAMC,QAAO,SAACC,GACvC,OAAOA,EAAGC,MAAQN,KACjB,GAECO,EAAW,KAaf,MAZkC,qBAAvBL,EAAaM,QACtBD,EAAWL,EAAaK,SAASE,KAAI,SAACC,GACpC,OACE,+BACE,4BAAIA,EAAQC,WACZ,mBAAGC,UAAU,OAAb,SAAqB,IAAIC,KAAKH,EAAQI,MAAMC,uBAC5C,mBAAGH,UAAU,eAAb,SAA6BF,EAAQM,SAH9BN,EAAQJ,SAUrB,sBAAKM,UAAU,OAAf,UACE,oBAAIA,UAAU,QAAd,SAAuBV,EAAaM,QACpC,mBAAGI,UAAU,OAAb,SAAqB,IAAIC,KAAKX,EAAaY,MAAMC,uBACjD,4BAAIb,EAAac,OACjB,oBAAIJ,UAAU,gBAAd,sBACA,oBAAIA,UAAU,eAAd,SAA8BL,IAC9B,uBAAMU,SAAUlB,EAAMmB,WAAYC,OAAO,OAAOC,UAASpB,EAAIY,UAAU,OAAvE,UACA,6CACE,gCACE,uBAAOS,QAAQ,WAAf,sBACA,uBACEC,SAAUvB,EAAMwB,YAChBC,KAAK,OACLC,KAAK,WACLC,YAAY,WACZ1B,GAAG,WACH2B,MAAO5B,EAAMW,QAAQC,SACrBiB,UAAQ,OAGZ,gCACE,uBAAOP,QAAQ,OAAf,qBACA,0BACEC,SAAUvB,EAAMwB,YAChBvB,GAAG,OACHyB,KAAK,OACLC,YAAY,UACZC,MAAO5B,EAAMW,QAAQM,KACrBY,UAAQ,EACRC,KAAK,SAGT,wBAAQL,KAAK,SAAb,2BC/COM,G,MARC,WACd,OACE,qBAAKlB,UAAU,iBAAf,SACE,qBAAKA,UAAU,SAAf,yBCHS,SAASmB,IAAe,IAC7BC,EAAaC,cAAbD,SAMR,OAJAE,qBAAU,WACRC,OAAOC,SAAS,EAAG,KAClB,CAACJ,IAEG,KCFT,IAgJeK,EAhJH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTnC,EADS,KACFoC,EADE,OAEcD,oBAAS,GAFvB,mBAETE,EAFS,KAEAC,EAFA,KAGVC,EAAU,6CAahBR,qBAAU,WAQRS,MAAM,GAAD,OAAID,EAAJ,UAPW,CACdvB,OAAQ,MACRyB,KAAM,OACNC,QAAS,CACP,eAAgB,sBAIjBC,MAAK,SAACC,GACL,OAAOA,EAAIC,UAEZF,MAAK,SAACG,GACLV,EAASU,GACTR,GAAW,QAEd,IAGH,IAAIS,EAAe,GACf/C,EAAMgD,SACRD,EAAe/C,EAAMM,KAAI,SAAC2C,GACxB,OAAKA,EAAKC,UAIR,oBAAmBzC,UAAU,OAA7B,SACE,eAAC,IAAD,CAAM0C,GAAE,WAAMF,EAAK9C,KAAnB,UACE,6BAAK8C,EAAK5C,QACV,mBAAGI,UAAU,OAAb,SAAqB,IAAIC,KAAKuC,EAAKtC,MAAMC,2BAHpCqC,EAAK9C,KAHP,SAvCG,MAqDcgC,mBAAS,CACrC3B,SAAU,GACVK,KAAM,KAvDQ,mBAqDTN,EArDS,KAqDA6C,EArDA,KAuHhB,OAAOf,EACL,cAAC,EAAD,IAEA,sBAAK5B,UAAU,MAAf,UACE,cAACmB,EAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOyB,KAAK,OAAZ,SACE,cAAC,EAAD,CACErD,MAAOA,EACPe,WA9DS,SAACuC,GAClBA,EAAEC,iBAEF,IAAM1D,EAAKyD,EAAEE,OAAOC,aAAa,WAE3BC,EAAU,CACd1C,OAAQ,OACRyB,KAAM,OACNC,QAAS,CACP,eAAgB,oBAElBiB,KAAMC,KAAKC,UAAUtD,IAGvBiC,MAAM,GAAD,OAAID,EAAJ,kBAAqB1C,EAArB,YAAmC6D,GACrCf,MAAK,SAACC,GACL,OAAOA,EAAIC,UAEZF,MAAK,SAACG,GACL,IAAIgB,EAEE/D,EAAeC,EAAMC,QAAO,SAACC,EAAI6D,GAIrC,OAHI7D,EAAGC,MAAQN,IACbiE,EAAQC,GAEH7D,EAAGC,MAAQN,KACjB,GAGH,GAAoB,YAAhBiD,EAAKkB,OAAsB,CAE7B,IAAMC,EA3FK,SAACjE,GAClB,OAAOA,EAAMM,KAAI,SAACJ,GAChB,OAAO,2BACFA,GADL,IAEEE,SAAS,YAAKF,EAAGE,eAuFK8D,CAAWlE,GAC/BiE,EAAYE,OAAOL,EAAO,EAA1B,2BACK/D,GADL,IAEEK,SAAS,GAAD,mBACHL,EAAaK,UADV,4BAGD0C,EAAKvC,SAHJ,IAIJI,KAAMD,KAAK0D,aAIjBhC,EAAS6B,GAGTb,EAAW,CACT5C,SAAU,GACVK,KAAM,UAgBNO,YAvEU,SAACkC,GACnBF,EAAW,2BACN7C,GADK,kBAEP+C,EAAEE,OAAOlC,KAAOgC,EAAEE,OAAOhC,UAqEpBjB,QAASA,MAGb,eAAC,IAAD,CAAO8D,OAAK,EAAChB,KAAK,IAAlB,UACE,qBAAK5C,UAAU,QAAf,SACE,8CAEF,6BAAKsC,cC3IfuB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,W","file":"static/js/main.6c0c9834.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Post.css\";\nimport { useParams } from \"react-router-dom\";\n\nconst Post = (props) => {\n  // const [post, setPost] = useState({});\n  const { id } = useParams();\n\n  const filteredPost = props.posts.filter((el) => {\n    return el._id === id;\n  })[0];\n\n  let comments = null;\n  if (typeof filteredPost.title !== \"undefined\") {\n    comments = filteredPost.comments.map((comment) => {\n      return (\n        <li key={comment._id}>\n          <p>{comment.username}</p>\n          <p className=\"date\">{new Date(comment.date).toLocaleDateString()}</p>\n          <p className=\"comment-text\">{comment.text}</p>\n        </li>\n      );\n    });\n  }\n\n  return (\n    <div className=\"Post\">\n      <h1 className=\"title\">{filteredPost.title}</h1>\n      <p className=\"date\">{new Date(filteredPost.date).toLocaleDateString()}</p>\n      <p>{filteredPost.text}</p>\n      <h2 className=\"comment-title\">Comments</h2>\n      <ol className=\"comment-list\">{comments}</ol>\n      <form onSubmit={props.addComment} method=\"POST\" data-id={id} className=\"form\">\n      <h3>Add Comment</h3>\n        <div>\n          <label htmlFor=\"username\">Username</label>\n          <input\n            onChange={props.handleInput}\n            type=\"text\"\n            name=\"username\"\n            placeholder=\"username\"\n            id=\"username\"\n            value={props.comment.username}\n            required\n          />\n        </div>\n        <div>\n          <label htmlFor=\"text\">Comment</label>\n          <textarea\n            onChange={props.handleInput}\n            id=\"text\"\n            name=\"text\"\n            placeholder=\"Comment\"\n            value={props.comment.text}\n            required\n            rows=\"5\"\n          ></textarea>\n        </div>\n        <button type=\"submit\">Submit</button>\n      </form>\n    </div>\n  );\n};\n\nexport default Post;\n","import React from \"react\";\nimport \"./Spinner.css\"\n\nconst Spinner = () => {\n  return (\n    <div className=\"loader-wrapper\">\n      <div className=\"loader\">Loading</div>\n    </div>\n  );\n};\n\nexport default Spinner;\n","import { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\nexport default function ScrollToTop() {\n  const { pathname } = useLocation();\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [pathname]);\n\n  return null;\n}","import \"./App.css\";\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { Switch, Link, Route } from \"react-router-dom\";\nimport Post from \"./components/Post\";\nimport Spinner from \"./components/Spinner\";\nimport ScrollToTop from \"./components/ScrollToTop\";\n\nconst App = () => {\n  const [posts, setPosts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const baseUrl = \"https://desolate-sands-05653.herokuapp.com\";\n\n  // Clone posts immutably\n  const clonePosts = (posts) => {\n    return posts.map((el) => {\n      return {\n        ...el,\n        comments: [...el.comments],\n      };\n    });\n  };\n\n  // Get all posts\n  useEffect(() => {\n    const options = {\n      method: \"GET\",\n      mode: \"cors\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    };\n    fetch(`${baseUrl}/posts`, options)\n      .then((res) => {\n        return res.json();\n      })\n      .then((data) => {\n        setPosts(data);\n        setLoading(false);\n      });\n  }, []);\n\n  // Display published posts\n  let postsDisplay = [];\n  if (posts.length) {\n    postsDisplay = posts.map((post) => {\n      if (!post.published) {\n        return null;\n      }\n      return (\n        <li key={post._id} className=\"post\">\n          <Link to={`/${post._id}`}>\n            <h1>{post.title}</h1>\n            <p className=\"date\">{new Date(post.date).toLocaleDateString()}</p>\n          </Link>\n        </li>\n      );\n    });\n  }\n\n  // Save form values to state\n  const [comment, setComment] = useState({\n    username: \"\",\n    text: \"\",\n  });\n\n  const handleInput = (e) => {\n    setComment({\n      ...comment,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  // Submit comment form\n  const addComment = (e) => {\n    e.preventDefault();\n\n    const id = e.target.getAttribute(\"data-id\");\n\n    const options = {\n      method: \"POST\",\n      mode: \"cors\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(comment),\n    };\n    // Save new comment on server database\n    fetch(`${baseUrl}/posts/${id}/comment`, options)\n      .then((res) => {\n        return res.json();\n      })\n      .then((data) => {\n        let index;\n        // Find which post to add comment to and its index in state array\n        const filteredPost = posts.filter((el, i) => {\n          if (el._id === id) {\n            index = i;\n          }\n          return el._id === id;\n        })[0];\n\n        // If successfully added to database add to react state\n        if (data.status === \"Success\") {\n          // Update state immutably\n          const clonedPosts = clonePosts(posts);\n          clonedPosts.splice(index, 1, {\n            ...filteredPost,\n            comments: [\n              ...filteredPost.comments,\n              {\n                ...data.comment,\n                date: Date.now(),\n              },\n            ],\n          });\n          setPosts(clonedPosts);\n\n          // Reset form\n          setComment({\n            username: \"\",\n            text: \"\",\n          });\n        }\n      });\n  };\n\n  return loading ? (\n    <Spinner></Spinner>\n  ) : (\n    <div className=\"App\">\n      <ScrollToTop />\n      <Switch>\n        <Route path=\"/:id\">\n          <Post\n            posts={posts}\n            addComment={addComment}\n            handleInput={handleInput}\n            comment={comment}\n          />\n        </Route>\n        <Route exact path=\"/\">\n          <div className=\"title\">\n            <h1>Blog Posts</h1>\n          </div>\n          <ul>{postsDisplay}</ul>\n        </Route>\n      </Switch>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { HashRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}